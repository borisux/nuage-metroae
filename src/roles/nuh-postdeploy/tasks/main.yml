- block:

  - name: Check for the role file
    stat:
      path: /opt/proxy/role
    register: role_file

  - name: Assert role file present
    assert:
      that: role_file.stat.exists
      msg: Could not find the /opt/proxy/role file on NUH.

  - name: Check haproxy status
    command: systemctl status haproxy
    register: haproxy_status

  - name: Assert haproxy is active
    assert:
      that: "haproxy_status.stdout is search('Active')"
      msg: haproxy is not active on NUH

  - name: Run only if Internal IP is present
    block: 

    - name: Get vsd node(s) information
      import_role:
        name: common
        tasks_from: vsd-node-info.yml
      vars:
        vsd_hostname: "{{ vsd_fqdn }}"
      run_once: true

    - name: Verify that notification application 1 is connected to VSD
      command: "/opt/ejabberd/bin/ejabberdctl connected_users"
      run_once: true
      register: app1_output
      delegate_to: "{{ vsd_hostname_list[0] }}"
      remote_user: "{{ custom_username | default(vsd_default_username) }}"
      become: "{{ 'no' if custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
      vars:
        ansible_become_pass: "{{ custom_password | default(vsd_default_password) }}"
      until: app1_output.stdout.find(notification_app1.username) != -1
      retries: 5
      delay: 30
      when: notification_app1 is defined

    - name: Verify that notification application 2 is connected to VSD
      command: "/opt/ejabberd/bin/ejabberdctl connected_users"
      run_once: true
      register: app2_output
      delegate_to: "{{ vsd_hostname_list[0] }}"
      remote_user: "{{ custom_username | default(vsd_default_username) }}"
      become: "{{ 'no' if custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
      vars:
        ansible_become_pass: "{{ custom_password | default(vsd_default_password) }}"
      until: app2_output.stdout.find(notification_app2.username) != -1
      retries: 5
      delay: 30
      when: notification_app2 is defined

    when: 
      - internal_ip is defined
      - groups['vsds'] is defined
      - not skip_vsd_installed_check

  remote_user: "{{ nuh_default_username }}"
