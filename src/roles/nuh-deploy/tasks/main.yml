---
- name: Clean known_hosts of NUH's (ignoring errors)
  known_hosts:
    name: "{{ hostname }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Wait for NUH ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ hostname }}"
    host_username: "root"

- name: Check if ha proxy is running (ignoring errors)
  command: systemctl status haproxy
  ignore_errors: true
  register: haproxy_output
  remote_user: "{{ nuh_default_username }}"

- name: Define skip nuh installation
  set_fact:
    skip_nuh_deploy: "{{ haproxy_output.stdout.find('active (running)') != -1 }}"

- name: Display if skipping NUH deploy
  debug:
    msg:
      - "*************************************************"
      - "Skipping NUH deploy because it is already running"
      - "*************************************************"
  when: skip_nuh_deploy

- block:

  - block:

    - name: Copy license file
      copy:
        src: "{{ nuh_license_file }}"
        dest: "/opt/proxy/nuh.license"

    - name: Verify License is valid
      shell: java -jar /opt/proxy/bin/lm/LicenseManager.jar features

    when: nuh_license_file is defined

  - name: Run the setup script for SA
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "n"
    args:
      chdir: /opt/proxy/bin
    when: nuh_sa_or_ha is match('sa')

  - name: Run the setup script for HA primary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "y"
      PEERADDR: "{{ groups['nuhs'][1] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuhs'][0]

  - name: Run the setup script for HA secondary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "n"
      PEERADDR: "{{ groups['nuhs'][0] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuhs'][1]

  - name: Set the timezone
    command: timedatectl set-timezone {{ nuh_timezone }}

  - name: Create and transfer certs
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    when: not skip_vsd_installed_check
    vars:
      certificate_password: "{{ nuh_default_password }}"
      certificate_username: "{{ inventory_hostname }}"
      commonName: "{{ inventory_hostname }}"
      certificate_type: server
      scp_user: "root"
      scp_location: /opt/proxy/data/certs
      additional_parameters:  -d {{ inventory_hostname }}

  - name: Create and transfer certs for "nuh-pre-boot" user
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    when: not skip_vsd_installed_check
    vars:
      certificate_password: "{{ nuh_default_password }}"
      certificate_username: "{{ inventory_hostname }}-pre-boot"
      commonName: "{{ inventory_hostname }}-pre-boot"
      certificate_type: server
      scp_user: "root"
      scp_location: /opt/proxy/data/certs
      additional_parameters:  "-d {{ inventory_hostname }}-pre"

  - name: Create and transfer certs for "nuh-post-boot" user
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    when: not skip_vsd_installed_check
    vars:
      certificate_password: "{{ nuh_default_password }}"
      certificate_username: "{{ inventory_hostname }}-post"
      commonName: "{{ inventory_hostname }}-post-boot"
      certificate_type: server
      scp_user: "root"
      scp_location: /opt/proxy/data/certs
      additional_parameters:  "-d {{ inventory_hostname }}-post"

  - name: Get CSP Enterprise ID
    nuage_vspk:
      auth: "{{ nuage_auth }}"
      type: Enterprise
      command: get_csp_enterprise
    register: nuage_csp_enterprise

  - name: Create proxy users
    delegate_to: localhost
    nuage_vspk:
        auth: "{{ nuage_auth }}"
        type: User
        parent_id: "{{ nuage_csp_enterprise }}"
        parent_type: Enterprise
        state: present
        match_filter: "userName == '{{item}}'"
        properties:
          email: "ansible@localhost.local"
          first_name: "Ansible"
          last_name: "Admin"
          password: "ansible-password"
          user_name: "{{item}}"
    register: nuage_users
    with_items:
          - "{{ inventory_hostname }}"
          - "{{ inventory_hostname }}-pre"
          - "{{ inventory_hostname }}-post"

  - name: Save user ids
    set_fact:
      proxy_user: "{{nuage_users.results[0].id}}"
      proxypre_user: "{{nuage_users.results[1].id}}"
      proxypost_user: "{{nuage_users.results[2].id}}"


  - name: Get CMS Group
    nuage_vspk:
        auth: "{{ nuage_auth }}"
        type: Group
        parent_id: "{{ nuage_csp_enterprise.id }}"
        parent_type: Enterprise
        command: find
        properties:
          name: "CMS Group"
    register: nuage_cms_group

  - name: get group IDs in Enterprise CMS
    uri:
      url: "https://{{ vsd_fqdn }}/nuage/api/v6/enterprises/{{ nuage_csp_enterprise }}/groups"
      method: GET
      user: csproot
      return_content: yes
      HEADER_Content-Type: "application/json"
      HEADER_Authorization: "{{ auth_token }}"
      HEADER_X-Nuage-Organization: "csp"    
      validate_certs: no
      body_format: json
      timeout: 30
    register: cms_groups

  # Do the same for other 3 groups

  # - set_fact:
  #     cms_group: "{{ cms_groups.json[1].ID }}"
  #     root_group: "{{ cms_groups.json[5].ID }}"
  #     bootstrap_group: "{{ cms_groups.json[0].ID }}"
  #     vspca_group: "{{ cms_groups.json[7].ID }}"
  #   ignore_errors: yes

  - name: add 'user=proxy' in vspca group
    delegate_to: localhost
    nuage_vspk:
        auth: "{{ nuage_auth }}"
        type: User
        id: "{{ item.user }}"
        parent_id: "{{ item.group }}"
        parent_type: Group
        state: present
    with_items:
      - { user: "{{ proxy_user }}", group: "{{ root_group }}" }
      - { user: "{{ proxypre_user }}", group: "{{ bootstrap_group }}" }
      - { user: "{{ proxypost_user }}", group: "{{ vspca_group }}" }

  - name: Copy NUH certificates 
    import_role:
      name: nuh-deploy
      tasks_from: nuh_copy_certificates.yml
    when:
      - internal_ip is defined
      - not skip_vsd_installed_check

  # - name: Change Groups for NUH users
  #   command: ls #Use New VSPK command

  - block:

    - name: Copy the Custom configuration file if provided by user
      copy:
        dest: "/opt/proxy/data/config.yml"
        src: "{{ custom_configuration_file_location }}"
        mode: 0640
        owner: "root"
        group: "root"
      when: custom_configuration_file_location is defined

    - block:

      - name: Add stats-out proxy entries to NUH configuration
        replace:
          path: /opt/proxy/data/config.yml
          regexp: "role: vsdconfig.*$"
          replace: "role: vsdconfig, enabled: true, firewallports: ['{{ stats_out_proxy_ui_port }}', '{{ stats_out_proxy_api_port }}', '{{ stats_out_proxy_jms_port }}', '{{ stats_out_proxy_xmpp_port }}', '{{ stats_out_proxy_cert_port }}'], settings: {uiport: '{{ stats_out_proxy_ui_port }}', apiport: '{{ stats_out_proxy_api_port }}', xmppport: '{{ stats_out_proxy_xmpp_port }}', jmsport: '{{ stats_out_proxy_jms_port }}', geo: false, certport: '{{ stats_out_proxy_cert_port }}'}}"

      - name: Add stats-out proxy entries to NUH configuration
        blockinfile:
          path: /opt/proxy/data/config.yml
          marker: ""
          block: |
            nsgstats:
              {% for stats_only_vsds in groups['stats_only_vsds'] | list %}
              - {{ hostvars[stats_only_vsds]['mgmt_ip'] }}
              {% endfor %}

      when: stats_out_proxy | default('NONE') == internal_ip | default("not_set")

    - name: Run the configuration script on NUH
      command: ansible-playbook configure.yml
      args:
        chdir: /opt/proxy/bin/ansible

    when:
      - custom_configuration_file_location is defined or stats_out_proxy | default('NONE') == internal_ip | default("not_set")
      - inventory_hostname == groups['nuhs'][0]

  when:
    - not skip_nuh_deploy
  remote_user: "{{ nuh_default_username }}"

- name: Setup health monitoring
  include_role:
    name: setup-health-monitoring
  vars:
    component_username: "{{ nuh_default_username }}"
  when: health_monitoring_agent | default("none") != "none"
