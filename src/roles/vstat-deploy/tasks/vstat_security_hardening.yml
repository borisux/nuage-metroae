- name: Clean known_hosts of VSTATs (ignoring errors)
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Clean known_hosts of VSTATs (ignoring errors)
  known_hosts:
    name: "{{ inventory_hostname }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Check if custom user is already exists and is connected via ssh
  command: ssh -oStrictHostKeyChecking=no -oPasswordAuthentication=no {{ vstat_custom_username }}@{{ inventory_hostname }} exit 0
  register: ssh_custom_user
  delegate_to: localhost
  ignore_errors: yes
  when: vstat_custom_username is defined

- block:
  
  - block:
    
    - name: Create a SSH pass
      command: openssl passwd -1 {{ vstat_custom_password }}
      register: openssl_pwd

    - name: Check if user exists
      command: id -u {{ vstat_custom_username }}
      ignore_errors: yes
      register: user_exists
    
    - name: Create the user if not present
      command: useradd -p {{ openssl_pwd.stdout }} {{ vstat_custom_username }}
      when: "'no such user' in user_exists.stderr"

    - name: Add user to sudoers list
      command: usermod -aG wheel {{ vstat_custom_username }}
    
    - name: Set custom password for MySQL root password for non-root user
      shell: mysqladmin -u root password "{{ vstat_mysql_password }}"
      when: vstat_mysql_password is defined
      run_once: True

    - name: Update sshd config file
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '#PermitRootLogin yes'
        line: 'PermitRootLogin no'

    - name: Create .ssh directory for vstat custom user
      file:
        path: '/home/{{ vstat_custom_username }}/.ssh/'
        state: directory
        owner: "{{ vstat_custom_username }}"
        group: "{{ vstat_custom_username }}"
    
    - block: 
    
      - name: Get the public key for the curren user
        command: cat "{{ user_ssh_pub_key }}"
        register: current_user_ssh_key

      - name: Create a temporary copy of the autorized_keys file
        template:
          src: "{{ role_path }}/../common/templates/authorized_keys.j2"
          backup: no
          dest: /tmp/authorized_keys_temp

      - name: Copy authorized file to vstat custom user home directory
        shell: >-
            sshpass -p'{{vstat_custom_password }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /tmp/authorized_keys_temp
            {{ vstat_custom_username }}@{{ mgmt_ip }}:/home/{{ vstat_custom_username }}/.ssh/authorized_keys
        no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

      - name: Remove temporary copy of authorized_key file
        file: path=tmp/authorized_keys_temp state=absent
      
      delegate_to: localhost

    - name: Set permission on the authorized file to 644
      shell: 'chmod 644 /home/{{vstat_custom_username }}/.ssh/authorized_keys'
      remote_user: "{{ vstat_custom_username }}"

    - name: Restart ssh server
      shell: /bin/systemctl restart sshd.service
    
    - name: Set vstat user to custom user
      set_fact:
        vstat_username: "{{ vstat_custom_username }}"
    
    when:
      - vstat_custom_username is defined
      - vstat_custom_password is defined 
      # - ssh_custom_user.rc != 0 

  remote_user: "{{ vstat_default_username }}"

- block:
  
  - name: Register failed login attempts and lockout time from file when not defined
    slurp:
      src: /etc/pam.d/system-auth-local
    register: system_auth

  - name: Register failed loging attemps
    set_fact:
        failed_login_attempts: "{{ system_auth['content'] | regex_findall('\\bdeny\\b\\=(.+)') }}"
    when: failed_login_attempts is undefined

  - name: Register failed loging timeout
    set_fact:
        failed_login_lockout_time: "{{ system_auth['content'] | regex_findall('\\bunlock_time\\b\\=(.+)') }}"
    when: failed_login_lockout_time is undefined

  - name: Lockout Time And Failed Login Attempts required
    lineinfile:
      path: "{{ item }}"
      regexp: 'auth        required      pam_faillock.so preauth silent audit deny=3 unlock_time=600'
      line: 'auth        required      pam_faillock.so preauth silent audit deny={{ failed_login_attempts }} unlock_time={{ failed_login_lockout_time }}'
    with_items:
      - "/etc/pam.d/password-auth"
      - "/etc/pam.d/system-auth"

  - name: Lockout Time And Failed Login Attempts default die
    lineinfile:
      path: "{{ item }}"
      regexp: 'auth        \[default=die\] pam_faillock.so authfail audit deny=3 unlock_time=600'
      line: 'auth        [default=die] pam_faillock.so authfail audit deny={{ failed_login_attempts }} unlock_time={{ failed_login_lockout_time }}'
    with_items:
      - "/etc/pam.d/password-auth"
      - "/etc/pam.d/system-auth"
  
  remote_user: "{{ vstat_custom_username | default(vstat_default_username) }}"
  become: "{{ 'no' if vstat_custom_username | default(vstat_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vstat_custom_password | default(vstat_default_password) }}"