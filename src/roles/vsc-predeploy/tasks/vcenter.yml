---
- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- include_role:
    name: check-node-running

- name: Display if skipping VSC predeploy
  debug:
    msg:
      - "****************************************************"
      - "Skipping VSC predeploy because it is already present"
      - "****************************************************"
  when: node_present

- block:

  - name: Deploy VSC image on vCenter
    include_role:
      name: common
      tasks_from: vcenter-deploy-image
    vars:
      management_network: "Management Network"
      vcenter_vsc_deploy: True

  - name: Update VM specifications
    include_role:
      name: common
      tasks_from: vcenter-change-specifications
    vars:
      management_network: "Management Network"
      component_ram: "{{ vsc_ram | int * 1024 }}"
      component_cpus: "{{ vsc_cpu_cores }}"
      component_size_gb: "{{ vsc_fallocate_size_gb }}"

  - name: Finding VM folder
    connection: local
    vmware_guest_find:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vmname }}"
      validate_certs: no
    register: vsc_vm_folder

  - name: Gathering info on VM
    connection: local
    vmware_guest_info:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      folder: "/{{ vcenter.datacenter }}{{ vsc_vm_folder['folders'][0] }}"
      name: "{{ vmname }}"
      validate_certs: no
    register: vsc_vm_facts

  - debug: var=vsc_vm_facts verbosity=1

  - name: Set VM UUID
    set_fact:
      uuid: "{{ vsc_vm_facts.instance.hw_product_uuid }}"

  - debug: var=uuid

  - name: Turn on autostart
    connection: local
    vmware_autostart:
      name: "{{ vm_name }}"
      uuid: "{{ uuid }}"
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      validate_certs: no
      state: enable

  - name: Verify VM is running
    assert:
      that: "vsc_vm_folder is succeeded and vsc_vm_facts is succeeded"
      msg: "VSC VM {{ vmname }} is not created"

  - name: Wait for VSC ssh to be ready
    connection: local
    wait_for:
      port: "22"
      host: "{{ mgmt_ip }}"
      search_regex: OpenSSH
      delay: 1

  when: not node_present
