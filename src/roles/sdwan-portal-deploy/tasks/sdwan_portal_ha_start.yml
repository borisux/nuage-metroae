# - name: SD-WAN Portal 1 bootstrap
#   command: /opt/vnsportal/cluster_bootstrap.sh
#   when: inventory_hostname == portal1.hostname
#
# - name: Pause for 120 seconds for logs
#   pause:
#     seconds: 120
#
# - name: Capture cluster bootstrap log output
#   shell: docker logs vnsportal-cluster-bootstrap | tee /tmp/vnsportal_cluster_bootstrap.log
#   when: inventory_hostname == portal1.hostname
#
# - block:
#
#   - name: SD-WAN Portal 2 start up
#     command: /opt/vnsportal/start.sh
#     when: inventory_hostname == portal2.hostname
#
#   - name: Check Portal endpoint health (ignoring errors)
#     uri:
#       url: https://localhost/vnsportal/health
#       method: GET
#       validate_certs: False
#     no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
#     register: curl_output
#     until: curl_output.status == 200
#     retries: 30
#     delay: 5
#     ignore_errors: true
#
#   when: inventory_hostname == portal2.hostname
#
# - block:
#
#   - name: SD-WAN Portal 3 start up
#     command: /opt/vnsportal/start.sh
#
#   - name: Check Portal endpoint health (ignoring errors)
#     uri:
#       url: https://localhost/vnsportal/health
#       method: GET
#       validate_certs: False
#     no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
#     register: curl_output
#     until: curl_output.status == 200
#     retries: 30
#     delay: 5
#     ignore_errors: true
#
#   when: inventory_hostname == portal3.hostname
#
# - block:
#
#   - name: SD-WAN Portal 1 start up
#     command: /opt/vnsportal/start.sh
#
#   - name: Check Portal endpoint health (ignoring errors)
#     uri:
#       url: https://localhost/vnsportal/health
#       method: GET
#       validate_certs: False
#     no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
#     register: curl_output
#     until: curl_output.status == 200
#     retries: 30
#     delay: 5
#     ignore_errors: true
#
#   when: inventory_hostname == portal1.hostname
